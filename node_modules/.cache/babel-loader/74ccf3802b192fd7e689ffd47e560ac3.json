{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst BaseComponent = ({\n  message = 'lol'\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 3\n  },\n  __self: this\n}, message);\n\nconst BaseComponentWithData = () => React.createElement(BaseComponent, {\n  message: \"Bob is your uncle\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n});\n\nconst StarWars = () => {\n  const _useState = useState([{\n    name: 'Darth Vader'\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const fetchCharacters = async () => {\n    console.info('i am running');\n    const result = await (await fetch(\"https://swapi.co/api/people/1/\")).json();\n    console.log(result);\n    const shaped = characterShape(result); // setCharacters([shaped, ...characters])\n  };\n\n  useEffect(() => {\n    console.log('fdfgdfdf');\n    fetchCharacters();\n  });\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        rest = _objectWithoutProperties(_ref, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, characters.map(character => React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, character.name)));\n};\n\nexport { BaseComponent, BaseComponentWithData, StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js"],"names":["React","useState","useEffect","BaseComponent","message","BaseComponentWithData","StarWars","name","characters","setCharacters","fetchCharacters","console","info","result","fetch","json","log","shaped","characterShape","rest","map","character"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAO,GAAC;AAAV,CAAD,KAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,OAAN,CAA7C;;AACA,MAAMC,qBAAqB,GAAG,MAAM,oBAAC,aAAD;AAAe,EAAA,OAAO,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBACeL,QAAQ,CAAC,CAAC;AAACM,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAD,CADvB;AAAA;AAAA,QACdC,UADc;AAAA,QACFC,aADE;;AAGrB,QAAMC,eAAe,GAAG,YAAY;AAClCC,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb;AACA,UAAMC,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAC,gCAAD,CAAZ,EAAgDC,IAAhD,EAArB;AACAJ,IAAAA,OAAO,CAACK,GAAR,CAAYH,MAAZ;AAEA,UAAMI,MAAM,GAAGC,cAAc,CAACL,MAAD,CAA7B,CALkC,CAOpC;AACC,GARD;;AASAX,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACK,GAAR,CAAY,UAAZ;AACAN,IAAAA,eAAe;AAChB,GAHQ,CAAT;;AAKA,QAAMQ,cAAc,GAAG;AAAA,QAAEX,IAAF,QAAEA,IAAF;AAAA,QAAWY,IAAX;;AAAA,WAAuB;AAAEZ,MAAAA;AAAF,KAAvB;AAAA,GAAvB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCC,UAAU,CAACY,GAAX,CAAeC,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,SAAS,CAACd,IAAf,CAA5B,CADD,CADF;AAKD,CAvBD;;AAyBA,SAASJ,aAAT,EAAwBE,qBAAxB,EAA+CC,QAA/C","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst BaseComponent = ({ message='lol' }) => <div>{message}</div>\nconst BaseComponentWithData = () => <BaseComponent message=\"Bob is your uncle\"/>\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState([{name: 'Darth Vader'}])\n\n  const fetchCharacters = async () => {\n    console.info('i am running')\n    const result = await (await fetch(\"https://swapi.co/api/people/1/\")).json()\n    console.log(result)\n\n    const shaped = characterShape(result)\n\n  // setCharacters([shaped, ...characters])\n  }\n  useEffect(() => {\n    console.log('fdfgdfdf')\n    fetchCharacters();\n  });\n\n  const characterShape = ({name, ...rest }) => ({ name })\n  return (\n    <ul>\n    {characters.map(character => <li>{character.name}</li>)}\n    </ul>\n  )\n}\n\nexport { BaseComponent, BaseComponentWithData, StarWars }\n"]},"metadata":{},"sourceType":"module"}