{"ast":null,"code":"import _objectSpread from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Box from \"./Custom/Box\";\nimport MetadataBox from \"./Custom/MetadataBox\";\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1]; //object has metadata like films and planets\n  //consider how requests all update state\n\n\n  const _useState7 = useState({\n    charID: 0,\n    films: [''],\n    starships: [''],\n    vehicles: ['']\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        characterMetadata = _useState8[0],\n        setMetadata = _useState8[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        films = _ref.films,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"films\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}/`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  const fetchCharacterMetadata = async charID => {\n    //Fetch character data\n    const result = await (await fetch(`https://swapi.co/api/people/${charID + 1}/`)).json();\n\n    const fetchMetaPromises = async meta => {\n      if (meta.length > 0) {\n        const metaPromises = meta.map(async item => (await fetch(item)).json());\n        return await Promise.all(metaPromises);\n      }\n    };\n\n    let shapedFilms = [];\n    let shapedStarships = [];\n    let shapedVehicles = [];\n    setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      films: '',\n      starships: '',\n      vehicles: ''\n    })); //Shaping functions\n\n    const shapeFilms = (_ref2) => {\n      let title = _ref2.title,\n          rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n      return {\n        title\n      };\n    };\n\n    const shapeStarships = (_ref3) => {\n      let name = _ref3.name,\n          rest = _objectWithoutProperties(_ref3, [\"name\"]);\n\n      return {\n        name\n      };\n    };\n\n    const shapeVehicles = (_ref4) => {\n      let name = _ref4.name,\n          rest = _objectWithoutProperties(_ref4, [\"name\"]);\n\n      return {\n        name\n      };\n    };\n\n    const filmPromises = await fetchMetaPromises(result.films);\n    const starshipPromises = await fetchMetaPromises(result.starships);\n    const vehiclePromises = await fetchMetaPromises(result.vehicles);\n\n    if (result.films.length > 0) {\n      shapedFilms = filmPromises.map(result => shapeFilms(result));\n      setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n        films: [...shapedFilms, ...characterMetadata.films]\n      }));\n    }\n\n    if (result.starships.length > 0) {\n      shapedStarships = starshipPromises.map(result => shapeStarships(result));\n      setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n        starships: [...shapedStarships, ...characterMetadata.starships]\n      }));\n    }\n\n    if (result.vehicles.length > 0) {\n      shapedVehicles = vehiclePromises.map(result => shapeVehicles(result));\n      setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n        vehicles: [...shapedVehicles, ...characterMetadata.vehicles]\n      }));\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID);\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && !loading && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Characters\", characters.map((character, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    onClick: () => {\n      setMetadata({\n        charID: index\n      });\n      fetchCharacterMetadata(index);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, character.name))), React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Metadata\", characterMetadata && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, characterMetadata.films && characterMetadata.films.length > 0 && React.createElement(MetadataBox, {\n    color: 'success',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Films:\"), characterMetadata.films.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, metaData.title))), characterMetadata.starships && characterMetadata.starships.length > 0 && React.createElement(MetadataBox, {\n    color: 'inputText',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Starships:\"), characterMetadata.starships.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, metaData.name))), characterMetadata.vehicles && characterMetadata.vehicles.length > 0 && React.createElement(MetadataBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Vehicles:\"), characterMetadata.vehicles.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, metaData.name)))))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useEffect","useState","Box","MetadataBox","StarWars","characters","setCharacters","loading","setLoading","state","message","hasError","setError","charID","films","starships","vehicles","characterMetadata","setMetadata","characterShape","name","rest","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","fetchCharacterMetadata","fetchMetaPromises","meta","metaPromises","shapedFilms","shapedStarships","shapedVehicles","shapeFilms","title","shapeStarships","shapeVehicles","filmPromises","starshipPromises","vehiclePromises","character","metaData"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport Box from \"./Custom/Box\";\nimport MetadataBox from \"./Custom/MetadataBox\";\n\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  //object has metadata like films and planets\n  //consider how requests all update state\n\n  const [characterMetadata, setMetadata] = useState({charID: 0, films: [''], starships: [''], vehicles: ['']})\n  const characterShape = ({ name, films, ...rest }) => ({ name });\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n\n      const charactersToFetch = Array.from(Array(15));\n\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}/`)).json())\n\n      const results = await Promise.all(promises);\n\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n    } catch(e) {\n      setError({state: true, message: e.message})\n    }\n  }\n\n  const fetchCharacterMetadata = async (charID) => {\n    //Fetch character data\n    const result = await (await fetch(`https://swapi.co/api/people/${charID+1}/`)).json();\n\n    const fetchMetaPromises = async (meta) => {\n      if (meta.length > 0) {\n          const metaPromises = meta.map(async (item) => (await fetch(item)).json());\n          return await Promise.all(metaPromises);\n\n      }\n    };\n    let shapedFilms = [];\n    let shapedStarships = [];\n    let shapedVehicles = [];\n    setMetadata((characterMetadata => ({...characterMetadata, films: '', starships: '', vehicles: ''})));\n\n\n    //Shaping functions\n    const shapeFilms = ({title,...rest}) => ({title});\n    const shapeStarships =({name,...rest}) => ({name});\n    const shapeVehicles =({name,...rest}) => ({name});\n\n    const filmPromises = await fetchMetaPromises(result.films);\n    const starshipPromises = await fetchMetaPromises(result.starships);\n    const vehiclePromises = await fetchMetaPromises(result.vehicles);\n\n    if (result.films.length > 0) { shapedFilms = filmPromises.map(result => shapeFilms(result));\n      setMetadata((characterMetadata) => ({...characterMetadata, films: [...shapedFilms,...characterMetadata.films]}));}\n    if (result.starships.length > 0) { shapedStarships = starshipPromises.map(result => shapeStarships(result));\n      setMetadata((characterMetadata) => ({...characterMetadata, starships: [...shapedStarships, ...characterMetadata.starships]}));}\n    if (result.vehicles.length > 0) { shapedVehicles = vehiclePromises.map(result => shapeVehicles(result));\n      setMetadata((characterMetadata) => ({...characterMetadata, vehicles: [...shapedVehicles,...characterMetadata.vehicles]}));}\n\n\n\n\n\n    setLoading(false)\n  };\n  useEffect( () => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID)\n  },[]);\n\n\n  return (\n      <>\n        {loading && <div>Loading</div>}\n        {hasError && hasError.state &&\n        <div>{hasError.message}</div>}\n        {characters && characters.length > 0 && !loading && (\n            <Box bg={'background'}>\n              <div className={'Row-Div'}>\n                Characters\n                {characters.map((character,index) =>\n                    <Box key={index}\n                         bg={'contentAreaBackground'}\n                         textAlign={'left'} p={1} px={4}\n                         onClick={() => {\n                           setMetadata(({charID: index}))\n                           fetchCharacterMetadata(index)\n                         }}>\n                      {character.name}\n                    </Box>)}\n              </div>\n              <div className={'Row-Div'}>\n                Metadata\n                {characterMetadata && (\n                    <Box bg={'background'}>\n                      {characterMetadata.films && characterMetadata.films.length > 0 &&\n                      <MetadataBox color={'success'}><b>Films:</b>\n                        {characterMetadata.films.map((metaData,index) =>\n                        <MetadataBox key={index}>{metaData.title}</MetadataBox>)}\n                      </MetadataBox>}\n                      {characterMetadata.starships && characterMetadata.starships.length > 0 &&\n                      <MetadataBox color={'inputText'}><b>Starships:</b>\n                        {characterMetadata.starships.map((metaData,index) =>\n                            <MetadataBox key={index}>{metaData.name}</MetadataBox>)}\n                      </MetadataBox>}\n                      {characterMetadata.vehicles && characterMetadata.vehicles.length > 0 &&\n                      <MetadataBox><b>Vehicles:</b>\n                        {characterMetadata.vehicles.map((metaData,index) =>\n                            <MetadataBox key={index}>{metaData.name}</MetadataBox>)}\n                      </MetadataBox>}\n                    </Box>)}\n              </div>\n            </Box>\n        )\n        }\n      </>\n  )\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}