{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Box from './Custom/Box';\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1]; //object has metadata like films and planets\n  //consider how requests all update state\n\n\n  const _useState7 = useState({\n    charID: 0,\n    films: [''],\n    starships: [''],\n    vehicles: ['']\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        characterMetadata = _useState8[0],\n        setMetadata = _useState8[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        films = _ref.films,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"films\"]);\n\n    return {\n      name\n    };\n  };\n\n  const shapeCharacterFilms = (_ref2) => {\n    let name = _ref2.name,\n        films = _ref2.films,\n        rest = _objectWithoutProperties(_ref2, [\"name\", \"films\"]);\n\n    return {\n      films\n    };\n  };\n\n  const shapeFilms = (_ref3) => {\n    let title = _ref3.title,\n        rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n    return {\n      title\n    };\n  };\n\n  const shapeCharacterStarships = (_ref4) => {\n    let starships = _ref4.starships,\n        rest = _objectWithoutProperties(_ref4, [\"starships\"]);\n\n    return {\n      starships\n    };\n  };\n\n  const shapeCharacterVehicles = (_ref5) => {\n    let vehicles = _ref5.vehicles,\n        rest = _objectWithoutProperties(_ref5, [\"vehicles\"]);\n\n    return {\n      vehicles\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]);\n      setLoading(false);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  const fetchCharacterMetadata = async characterID => {\n    //Get character films..\n    const result = await (await fetch(`https://swapi.co/api/people/${characterID + 1}`)).json();\n    console.log(result);\n    const charFilms = shapeCharacterFilms(result);\n    console.log(charFilms);\n    const filmPromises = charFilms.films.map(async (item, index, array) => {\n      console.log(item);\n      await (await fetch(item)).json();\n    });\n    console.log(filmPromises);\n    const filmResults = await Promise.all(filmPromises);\n    const shapedFilms = filmResults.map(result => shapeFilms(result));\n    setMetadata({\n      films: shapedFilms\n    }); //Get starships..\n\n    const charStarships = shapeCharacterStarships(result);\n    const starshipPromises = charStarships.starships.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/starships/${index + 1}`)).json());\n    const starshipResults = await Promise.all(starshipPromises);\n    const shapedStarships = starshipResults.map(result => shapedStarships(result));\n    setMetadata({\n      starships: shapedStarships\n    }); //Get character vehicles..\n\n    const charVehicles = shapeCharacterVehicles(result);\n    const vehiclesPromises = charVehicles.vehicles.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/vehicles/${index + 1}`)).json());\n    const vehiclesResults = await Promise.all(vehiclesPromises);\n    const shapedVehicles = vehiclesResults.map(result => shapedVehicles(result));\n    setMetadata({\n      vehicles: shapedVehicles\n    });\n  };\n\n  useEffect(() => {\n    fetchCharacters(); //By default fetch Luke Skywalkers data\n\n    fetchCharacterMetadata(0);\n  }, []);\n\n  const setData = id => {\n    setMetadata({\n      charID: id\n    });\n  };\n\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, characters.map((character, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    onClick: setData(1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, character.name))), React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Box, {\n    bg: 'contentAreaBackground',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, characterMetadata.films.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, metaData.title)), characterMetadata.starships.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, metaData.name)), characterMetadata.vehicles.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, metaData.name))))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useState","useEffect","Box","StarWars","characters","setCharacters","loading","setLoading","state","message","hasError","setError","charID","films","starships","vehicles","characterMetadata","setMetadata","characterShape","name","rest","shapeCharacterFilms","shapeFilms","title","shapeCharacterStarships","shapeCharacterVehicles","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","fetchCharacterMetadata","characterID","console","log","charFilms","filmPromises","filmResults","shapedFilms","charStarships","starshipPromises","starshipResults","shapedStarships","charVehicles","vehiclesPromises","vehiclesResults","shapedVehicles","setData","id","character","metaData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Box from './Custom/Box'\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  //object has metadata like films and planets\n  //consider how requests all update state\n\n  const [characterMetadata, setMetadata] = useState({charID: 0,films: [''], starships: [''], vehicles: ['']})\n  const characterShape = ({ name, films, ...rest }) => ({ name })\n  const shapeCharacterFilms = ({name, films,...rest}) => ({films})\n  const shapeFilms = ({title,...rest}) => ({title})\n  const shapeCharacterStarships = ({starships,...rest}) => ({ starships })\n  const shapeCharacterVehicles = ({vehicles,...rest}) => ({ vehicles })\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true)\n\n\n     const charactersToFetch = Array.from(Array(15))\n\n     const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}`)).json())\n\n     const results = await Promise.all(promises)\n\n     const shapedResults = results.map(result => characterShape(result))\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n      setLoading(false)\n   } catch(e) {\n      setError({state: true, message: e.message})\n  }}\n  const fetchCharacterMetadata = async (characterID) => {\n    //Get character films..\n    const result = await (await fetch(`https://swapi.co/api/people/${characterID+1}`)).json()\n\n    console.log(result)\n\n    const charFilms = shapeCharacterFilms(result)\n\n    console.log(charFilms)\n\n    const filmPromises = charFilms.films.map(async (item, index, array) => {\n      console.log(item)\n      await (await fetch(item)).json()\n    })\n\n    console.log(filmPromises)\n\n    const filmResults = await Promise.all(filmPromises)\n\n    \n    const shapedFilms = filmResults.map(result => shapeFilms(result))\n\n    setMetadata({films: shapedFilms})\n\n    //Get starships..\n    const charStarships = shapeCharacterStarships(result)\n\n    const starshipPromises = charStarships.starships.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/starships/${index+1}`)).json())\n\n    const starshipResults = await Promise.all(starshipPromises)\n\n    const shapedStarships = starshipResults.map(result => shapedStarships(result))\n\n    setMetadata({starships: shapedStarships})\n\n    //Get character vehicles..\n    const charVehicles = shapeCharacterVehicles(result)\n\n    const vehiclesPromises = charVehicles.vehicles.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/vehicles/${index+1}`)).json())\n\n    const vehiclesResults = await Promise.all(vehiclesPromises)\n\n    const shapedVehicles = vehiclesResults.map(result => shapedVehicles(result))\n\n    setMetadata({vehicles: shapedVehicles})\n  }\n\n    useEffect(() => {\n      fetchCharacters()\n      //By default fetch Luke Skywalkers data\n      fetchCharacterMetadata(0)\n  },[]);\n\n  const setData = (id) => {\n    setMetadata({charID: id})\n  }\n    return (\n    <>\n  {loading && <div>Loading</div>}\n  {hasError && hasError.state &&\n  <div>{hasError.message}</div>}\n  {characters && characters.length > 0 && (\n      <Box bg={'background'}>\n        <div className={'Row-Div'}>\n        {characters.map((character,index) =>\n            <Box key={index}\n            bg={'contentAreaBackground'}\n            textAlign={'left'} p={1} px={4}\n            onClick={setData(1)}>\n            {character.name}\n            </Box>)}\n        </div>\n        <div className={'Row-Div'}>\n          <Box bg={'contentAreaBackground'}>\n            {characterMetadata.films.map((metaData,index) =>\n               <Box key={index}\n                    bg={'contentAreaBackground'}\n                    textAlign={'left'} p={1} px={4}>\n                 {metaData.title}</Box>)}\n            {characterMetadata.starships.map((metaData,index) =>\n                <Box key={index}\n                     bg={'contentAreaBackground'}\n                     textAlign={'left'} p={1} px={4}>\n                  {metaData.name}</Box>)}\n            {characterMetadata.vehicles.map((metaData,index) =>\n                <Box key={index}\n                     bg={'contentAreaBackground'}\n                     textAlign={'left'} p={1} px={4}>\n                  {metaData.name}\n                </Box>)}\n          </Box>\n        </div>\n      </Box>\n    )\n  }\n  </>\n)\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}