{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Box from './Custom/Box';\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1]; //object has metadata like films and planets\n  //consider how requests all update state\n\n\n  const film = {\n    title: ''\n  };\n  const starship = {\n    name: '',\n    model: ''\n  };\n  const vehicles = {\n    name: ''\n  };\n\n  const _useState7 = useState({\n    films: [film],\n    starships: [starship],\n    vehicles: [vehicles]\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        characterMetadata = _useState8[0],\n        setMetadata = _useState8[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        films = _ref.films,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"films\"]);\n\n    return {\n      name\n    };\n  };\n\n  const shapeCharacterFilms = (_ref2) => {\n    let films = _ref2.films,\n        rest = _objectWithoutProperties(_ref2, [\"films\"]);\n\n    return {\n      films\n    };\n  };\n\n  const shapeCharacterStarships = (_ref3) => {\n    let starships = _ref3.starships,\n        rest = _objectWithoutProperties(_ref3, [\"starships\"]);\n\n    return {\n      starships\n    };\n  };\n\n  const shapeCharacterVehicles = (_ref4) => {\n    let vehicles = _ref4.vehicles,\n        rest = _objectWithoutProperties(_ref4, [\"vehicles\"]);\n\n    return {\n      vehicles\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]);\n      setLoading(false);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  const fetchCharacterMetadata = async characterID => {\n    const result = await (await fetch(`https://swapi.co/api/people/${characterID}`)).json();\n  };\n\n  useEffect(() => {\n    fetchCharacters();\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, characters.map((character, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, character.name))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useState","useEffect","Box","StarWars","characters","setCharacters","loading","setLoading","state","message","hasError","setError","film","title","starship","name","model","vehicles","films","starships","characterMetadata","setMetadata","characterShape","rest","shapeCharacterFilms","shapeCharacterStarships","shapeCharacterVehicles","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","fetchCharacterMetadata","characterID","character"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Box from './Custom/Box'\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  //object has metadata like films and planets\n  //consider how requests all update state\n  const film = {\n    title: ''\n  };\n  const starship = {name: '', model: ''};\n  const vehicles = {name: ''};\n  const [characterMetadata, setMetadata] = useState({films: [film], starships: [starship], vehicles: [vehicles]})\n  const characterShape = ({ name, films, ...rest }) => ({ name })\n  const shapeCharacterFilms = ({films,...rest}) => ({films})\n  const shapeCharacterStarships = ({starships,...rest}) => ({starships})\n  const shapeCharacterVehicles = ({vehicles,...rest}) => ({vehicles})\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true)\n\n\n     const charactersToFetch = Array.from(Array(15))\n\n     const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}`)).json())\n\n     const results = await Promise.all(promises)\n\n     const shapedResults = results.map(result => characterShape(result))\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n      setLoading(false)\n   } catch(e) {\n      setError({state: true, message: e.message})\n  }}\n  const fetchCharacterMetadata = async (characterID) => {\n    const result = await (await fetch(`https://swapi.co/api/people/${characterID}`)).json()\n  }\n    useEffect(() => {\n    fetchCharacters();\n  },[]);\n\n\n    return (\n    <>\n  {loading && <div>Loading</div>}\n  {hasError && hasError.state &&\n  <div>{hasError.message}</div>}\n  {characters && characters.length > 0 && (\n      <Box bg={'background'}>\n        {characters.map((character,index) => <Box key={index} bg={'contentAreaBackground'} textAlign={'left'} p={1} px={4}>{character.name}</Box>)}\n      </Box>\n    )\n  }\n  </>\n)\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}