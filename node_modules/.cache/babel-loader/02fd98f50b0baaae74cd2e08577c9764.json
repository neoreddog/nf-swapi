{"ast":null,"code":"import _objectSpread from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Box from \"./Custom/Box\";\nimport MetadataBox from \"./Custom/MetadataBox\";\nimport { Flex } from 'reflexbox/styled-components';\nimport { Heading, Text } from 'rebass/styled-components';\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        metaLoading = _useState6[0],\n        setMetaLoading = _useState6[1];\n\n  const _useState7 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        hasError = _useState8[0],\n        setError = _useState8[1]; //object has metadata like films and planets\n  //consider how requests all update state\n\n\n  const _useState9 = useState({\n    charID: 0,\n    films: [],\n    starships: [],\n    vehicles: []\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        characterMetadata = _useState10[0],\n        setMetadata = _useState10[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        films = _ref.films,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"films\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}/`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const fetchCharacterMetadata = async charID => {\n    //Fetch character data\n    console.log('loading meta');\n    setMetaLoading(true);\n    const result = await (await fetch(`https://swapi.co/api/people/${charID + 1}/`)).json();\n\n    const fetchMetaPromises = async meta => {\n      if (meta.length > 0) {\n        const metaPromises = meta.map(async item => (await fetch(item)).json());\n        return await Promise.all(metaPromises);\n      }\n    };\n\n    let shapedFilms = [];\n    let shapedStarships = [];\n    let shapedVehicles = [];\n    setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      films: '',\n      starships: '',\n      vehicles: ''\n    })); //Shaping functions\n\n    const shapeFilms = (_ref2) => {\n      let title = _ref2.title,\n          episode_id = _ref2.episode_id,\n          rest = _objectWithoutProperties(_ref2, [\"title\", \"episode_id\"]);\n\n      return {\n        title,\n        episode_id\n      };\n    };\n\n    const shapeStarships = (_ref3) => {\n      let name = _ref3.name,\n          rest = _objectWithoutProperties(_ref3, [\"name\"]);\n\n      return {\n        name\n      };\n    };\n\n    const shapeVehicles = (_ref4) => {\n      let name = _ref4.name,\n          rest = _objectWithoutProperties(_ref4, [\"name\"]);\n\n      return {\n        name\n      };\n    };\n\n    const filmPromises = await fetchMetaPromises(result.films);\n    const starshipPromises = await fetchMetaPromises(result.starships);\n    const vehiclePromises = await fetchMetaPromises(result.vehicles);\n\n    if (charID === characterMetadata.charID && !metaLoading) {\n      if (result.films.length > 0) {\n        shapedFilms = filmPromises.map(result => shapeFilms(result));\n        setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n          films: [...shapedFilms, ...characterMetadata.films]\n        }));\n      }\n\n      if (result.starships.length > 0) {\n        shapedStarships = starshipPromises.map(result => shapeStarships(result));\n        setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n          starships: [...shapedStarships, ...characterMetadata.starships]\n        }));\n      }\n\n      if (result.vehicles.length > 0) {\n        shapedVehicles = vehiclePromises.map(result => shapeVehicles(result));\n        setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n          vehicles: [...shapedVehicles, ...characterMetadata.vehicles]\n        }));\n      }\n    }\n\n    setMetaLoading(false);\n  };\n\n  useEffect(() => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID);\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(Text, {\n    fontSize: 4,\n    fontWeight: 'bold',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && !loading && //Characters\n  React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Box, {\n    width: 1 / 2,\n    p: 0,\n    m: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    textAlign: 'left',\n    fontSize: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Characters\"), React.createElement(MetadataBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, characters.map((character, index) => React.createElement(MetadataBox, {\n    key: index,\n    bg: characterMetadata.charID === index ? 'primary' : 'contentAreaBackground',\n    onClick: () => {\n      setMetadata({\n        charID: index\n      });\n      fetchCharacterMetadata(index);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, character.name)))), React.createElement(Box, {\n    width: 1 / 2,\n    p: 0,\n    m: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    textAlign: 'left',\n    fontSize: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Metadata\"), metaLoading ? React.createElement(Flex, {\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: 600,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Text, {\n    fontSize: 4,\n    fontWeight: 'bold',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Loading\")) : React.createElement(React.Fragment, null, React.createElement(MetadataBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, characterMetadata && characterMetadata.films && characterMetadata.films.length > 0 && React.createElement(MetadataBox, {\n    color: 'primary',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Films:\"), characterMetadata.films.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, metaData.title))), characterMetadata && characterMetadata.starships && characterMetadata.starships.length > 0 && React.createElement(MetadataBox, {\n    color: 'primary',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Starships:\"), characterMetadata.starships.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, metaData.name))), characterMetadata && characterMetadata.vehicles && characterMetadata.vehicles.length > 0 && React.createElement(MetadataBox, {\n    color: 'primary',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Vehicles:\"), characterMetadata.vehicles.map((metaData, index) => React.createElement(MetadataBox, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, metaData.name)))))))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useEffect","useState","Box","MetadataBox","Flex","Heading","Text","StarWars","characters","setCharacters","loading","setLoading","metaLoading","setMetaLoading","state","message","hasError","setError","charID","films","starships","vehicles","characterMetadata","setMetadata","characterShape","name","rest","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","fetchCharacterMetadata","console","log","fetchMetaPromises","meta","metaPromises","shapedFilms","shapedStarships","shapedVehicles","shapeFilms","title","episode_id","shapeStarships","shapeVehicles","filmPromises","starshipPromises","vehiclePromises","character","metaData"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport Box from \"./Custom/Box\";\nimport MetadataBox from \"./Custom/MetadataBox\";\nimport {Flex} from 'reflexbox/styled-components'\nimport {Heading, Text} from 'rebass/styled-components'\n\n\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(true)\n  const [metaLoading, setMetaLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  //object has metadata like films and planets\n  //consider how requests all update state\n\n  const [characterMetadata, setMetadata] = useState({charID: 0,films:  [], starships: [], vehicles: []})\n  const characterShape = ({ name, films, ...rest }) => ({ name });\n\n  const fetchCharacters = async () => {\n    try {\n\n      const charactersToFetch = Array.from(Array(15));\n\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}/`)).json())\n\n      const results = await Promise.all(promises);\n\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n    } catch(e) {\n      setError({state: true, message: e.message})\n    }\n    setLoading(false)\n  }\n\n  const fetchCharacterMetadata = async (charID) => {\n    //Fetch character data\n      console.log('loading meta')\n      setMetaLoading(true)\n      const result = await (await fetch(`https://swapi.co/api/people/${charID + 1}/`)).json();\n\n      const fetchMetaPromises = async (meta) => {\n        if (meta.length > 0) {\n          const metaPromises = meta.map(async (item) => (await fetch(item)).json());\n          return await Promise.all(metaPromises);\n\n        }\n      };\n      let shapedFilms = [];\n      let shapedStarships = [];\n      let shapedVehicles = [];\n      setMetadata((characterMetadata => ({...characterMetadata, films: '', starships: '', vehicles: ''})));\n\n\n      //Shaping functions\n      const shapeFilms = ({title, episode_id, ...rest}) => ({title, episode_id});\n      const shapeStarships = ({name, ...rest}) => ({name});\n      const shapeVehicles = ({name, ...rest}) => ({name});\n\n      const filmPromises = await fetchMetaPromises(result.films);\n      const starshipPromises = await fetchMetaPromises(result.starships);\n      const vehiclePromises = await fetchMetaPromises(result.vehicles);\n\n      if (charID === characterMetadata.charID && !metaLoading) {\n        if (result.films.length > 0) {\n          shapedFilms = filmPromises.map(result => shapeFilms(result));\n          setMetadata((characterMetadata) => ({\n            ...characterMetadata,\n            films: [...shapedFilms, ...characterMetadata.films]\n          }));\n        }\n        if (result.starships.length > 0) {\n          shapedStarships = starshipPromises.map(result => shapeStarships(result));\n          setMetadata((characterMetadata) => ({\n            ...characterMetadata,\n            starships: [...shapedStarships, ...characterMetadata.starships]\n          }));\n        }\n        if (result.vehicles.length > 0) {\n          shapedVehicles = vehiclePromises.map(result => shapeVehicles(result));\n          setMetadata((characterMetadata) => ({\n            ...characterMetadata,\n            vehicles: [...shapedVehicles, ...characterMetadata.vehicles]\n          }));\n        }\n      }\n      setMetaLoading(false)\n  };\n  useEffect( () => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID)\n  },[]);\n\n\n  return (\n      <>\n        {loading && <Text fontSize={4} fontWeight={'bold'}>Loading</Text>}\n        {hasError && hasError.state &&\n        <div>{hasError.message}</div>}\n        {characters && characters.length > 0 && !loading && (\n            //Characters\n            <Box bg={'background'}>\n              <Flex>\n                <Box width={1/2} p={0} m={2}>\n                  <Heading textAlign={'left'} fontSize={4}>Characters</Heading>\n                  <MetadataBox>\n                  {characters.map((character,index) =>\n                      <MetadataBox key={index}\n                           bg={characterMetadata.charID === index ? 'primary': 'contentAreaBackground'}\n                           onClick={() => {\n                             setMetadata(({charID: index}))\n                             fetchCharacterMetadata(index)}}>\n                        {character.name}\n                      </MetadataBox>)}\n                    </MetadataBox>\n                  </Box>\n                <Box width={1/2} p={0} m={2}>\n                  <Heading textAlign={'left'} fontSize={4}>Metadata</Heading>\n\n                  {metaLoading ? <Flex flexWrap=\"wrap\" justifyContent=\"center\" alignItems=\"center\" height={600}><Text fontSize={4} fontWeight={'bold'}>Loading</Text></Flex>  :\n                      <>\n                      <MetadataBox>\n                        {characterMetadata && characterMetadata.films && characterMetadata.films.length > 0 &&\n                        <MetadataBox color={'primary'}><b>Films:</b>\n                          {characterMetadata.films.map((metaData,index) =>\n                          <MetadataBox key={index}  >{metaData.title}</MetadataBox>)}\n                        </MetadataBox>}\n                        {characterMetadata && characterMetadata.starships && characterMetadata.starships.length > 0 &&\n                        <MetadataBox color={'primary'}><b>Starships:</b>\n                          {characterMetadata.starships.map((metaData,index) =>\n                              <MetadataBox key={index}>{metaData.name}</MetadataBox>)}\n                        </MetadataBox>}\n                        {characterMetadata && characterMetadata.vehicles && characterMetadata.vehicles.length > 0 &&\n                        <MetadataBox color={'primary'}><b>Vehicles:</b>\n                          {characterMetadata.vehicles.map((metaData,index) =>\n                              <MetadataBox key={index}>{metaData.name}</MetadataBox>)}\n                        </MetadataBox>}\n                      </MetadataBox>\n                      </>}\n                </Box>\n              </Flex>\n            </Box>\n        )\n        }\n      </>\n  )\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}