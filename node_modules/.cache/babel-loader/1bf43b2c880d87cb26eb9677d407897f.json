{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Box from './Custom/Box';\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        rest = _objectWithoutProperties(_ref, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true); // create array of numbers ie characters newArray(0-20)\n      // generate promise array [await fetch,fetch,fetch]\n      // promise.all for results\n\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]);\n      setLoading(false);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchCharacters();\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, characters.map(character => React.createElement(Box, {\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, character.name))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useState","useEffect","Box","StarWars","characters","setCharacters","loading","setLoading","state","message","hasError","setError","characterShape","name","rest","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","character"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBACeH,QAAQ,CAAC,EAAD,CADvB;AAAA;AAAA,QACdI,UADc;AAAA,QACFC,aADE;;AAAA,qBAESL,QAAQ,CAAC,KAAD,CAFjB;AAAA;AAAA,QAEdM,OAFc;AAAA,QAELC,UAFK;;AAAA,qBAGQP,QAAQ,CAAC;AAACQ,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAD,CAHhB;AAAA;AAAA,QAGdC,QAHc;AAAA,QAGJC,QAHI;;AAKrB,QAAMC,cAAc,GAAG;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,QAAYC,IAAZ;;AAAA,WAAwB;AAAED,MAAAA;AAAF,KAAxB;AAAA,GAAvB;;AAEA,QAAME,eAAe,GAAG,YAAY;AAClC,QAAI;AACFR,MAAAA,UAAU,CAAC,IAAD,CAAV,CADE,CAGF;AAEA;AAEA;;AAED,YAAMS,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAhB,CAA1B;AAEA,YAAME,QAAQ,GAAGH,iBAAiB,CAACI,GAAlB,CAAsB,OAAOC,IAAP,EAAaC,KAAb,EAAoBC,KAApB,KAA8B,MAAM,CAAC,MAAMC,KAAK,CAAE,+BAA8BF,KAAK,GAAC,CAAE,EAAxC,CAAZ,EAAwDG,IAAxD,EAA1D,CAAjB;AAED,YAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAtB;AAEA,YAAMU,aAAa,GAAGH,OAAO,CAACN,GAAR,CAAYU,MAAM,IAAIlB,cAAc,CAACkB,MAAD,CAApC,CAAtB;AACEzB,MAAAA,aAAa,CAAC,CAAC,GAAGwB,aAAJ,EAAmB,IAAIzB,UAAU,GAAGA,UAAU,CAAC2B,MAAX,GAAoB,CAAjC,GAAqC3B,UAArC,GAAkD,EAAtD,CAAnB,CAAD,CAAb;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KAlBA,CAkBC,OAAMyB,CAAN,EAAS;AACRrB,MAAAA,QAAQ,CAAC;AAACH,QAAAA,KAAK,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAEuB,CAAC,CAACvB;AAAzB,OAAD,CAAR;AACH;AAAC,GArBF;;AAuBER,EAAAA,SAAS,CAAC,MAAM;AAChBc,IAAAA,eAAe;AAChB,GAFU,EAET,EAFS,CAAT;AAKA,SACA,0CACDT,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADV,EAEDI,QAAQ,IAAIA,QAAQ,CAACF,KAArB,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,QAAQ,CAACD,OAAf,CAHE,EAIDL,UAAU,IAAIA,UAAU,CAAC2B,MAAX,GAAoB,CAAlC,IACG,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,UAAU,CAACgB,GAAX,CAAea,SAAS,IAAI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,uBAAT;AAAkC,IAAA,SAAS,EAAE,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsDA,SAAS,CAACpB,IAAhE,CAA5B,CADH,CALF,CADA;AAaH,CAhDD;;AAmDA,SAASV,QAAT","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Box from './Custom/Box'\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n\n  const characterShape = ({ name, ...rest }) => ({ name })\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true)\n\n      // create array of numbers ie characters newArray(0-20)\n\n      // generate promise array [await fetch,fetch,fetch]\n\n      // promise.all for results\n\n     const charactersToFetch = Array.from(Array(15))\n\n     const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}`)).json())\n\n    const results = await Promise.all(promises)\n\n    const shapedResults = results.map(result => characterShape(result))\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n      setLoading(false)\n   } catch(e) {\n      setError({state: true, message: e.message})\n  }}\n\n    useEffect(() => {\n    fetchCharacters();\n  },[]);\n\n\n    return (\n    <>\n  {loading && <div>Loading</div>}\n  {hasError && hasError.state &&\n  <div>{hasError.message}</div>}\n  {characters && characters.length > 0 && (\n      <Box bg={'background'}>\n        {characters.map(character => <Box bg={'contentAreaBackground'} textAlign={'left'}>{character.name}</Box>)}\n      </Box>\n    )\n  }\n  </>\n)\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}