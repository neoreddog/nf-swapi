{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst BaseComponent = ({\n  message = 'lol'\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 3\n  },\n  __self: this\n}, message);\n\nconst BaseComponentWithData = () => React.createElement(BaseComponent, {\n  message: \"Bob is your uncle\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n});\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        rest = _objectWithoutProperties(_ref, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true); // create array of numbers ie characters newArray(0-20)\n\n      const charsToFetch = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'];\n\n      const result = async index => await (await fetch(\"https://swapi.co/api/people/\" + charsToFetch[index])).json(); // generate promise array [await fetch,fetch,fetch]\n      // promise.all for results\n\n\n      const getAllCharacters = async () => {\n        await Promise.all(charsToFetch.map((char, index) => {\n          result(index);\n        }));\n      };\n\n      charsToFetch.map((char, index) => console.log(char * (index + 1))); //  charactersToFetch.map((characterToFetch, index) = async() => {\n      //     await(await fetch(\"https://swapi.co/api/people/\" + index))\n      //    }\n\n      const shaped = characterShape();\n      setCharacters([shaped, ...(characters & characters.length > 0 ? characters : [])]);\n      setLoading(false);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchCharacters();\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Error\"), characters && characters.length > 0 && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, characters.map(character => React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, character.name))));\n};\n\nexport { BaseComponent, BaseComponentWithData, StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js"],"names":["React","useState","useEffect","BaseComponent","message","BaseComponentWithData","StarWars","characters","setCharacters","loading","setLoading","state","hasError","setError","characterShape","name","rest","fetchCharacters","charsToFetch","result","index","fetch","json","getAllCharacters","Promise","all","map","char","console","log","shaped","length","e","character"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAO,GAAC;AAAV,CAAD,KAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,OAAN,CAA7C;;AACA,MAAMC,qBAAqB,GAAG,MAAM,oBAAC,aAAD;AAAe,EAAA,OAAO,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBACeL,QAAQ,CAAC,EAAD,CADvB;AAAA;AAAA,QACdM,UADc;AAAA,QACFC,aADE;;AAAA,qBAESP,QAAQ,CAAC,KAAD,CAFjB;AAAA;AAAA,QAEdQ,OAFc;AAAA,QAELC,UAFK;;AAAA,qBAGQT,QAAQ,CAAC;AAACU,IAAAA,KAAK,EAAE,KAAR;AAAeP,IAAAA,OAAO,EAAE;AAAxB,GAAD,CAHhB;AAAA;AAAA,QAGdQ,QAHc;AAAA,QAGJC,QAHI;;AAIrB,QAAMC,cAAc,GAAG;AAAA,QAAEC,IAAF,QAAEA,IAAF;AAAA,QAAWC,IAAX;;AAAA,WAAuB;AAAED,MAAAA;AAAF,KAAvB;AAAA,GAAvB;;AAEA,QAAME,eAAe,GAAG,YAAY;AAClC,QAAI;AACFP,MAAAA,UAAU,CAAC,IAAD,CAAV,CADE,CAEF;;AACA,YAAMQ,YAAY,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,IAArC,EACM,IADN,EACW,IADX,EACgB,IADhB,EACqB,IADrB,EAC0B,IAD1B,EAC+B,IAD/B,CAArB;;AAEA,YAAMC,MAAM,GAAG,MAAMC,KAAN,IAAgB,MAAM,CAAC,MAAMC,KAAK,CAAC,iCAAiCH,YAAY,CAACE,KAAD,CAA9C,CAAZ,EAAoEE,IAApE,EAArC,CALE,CAMF;AACA;;;AACA,YAAMC,gBAAgB,GAAG,YAAY;AAAE,cACrCC,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACQ,GAAb,CAAiB,CAACC,IAAD,EAAOP,KAAP,KAAiB;AAC9CD,UAAAA,MAAM,CAACC,KAAD,CAAN;AAAc,SADF,CAAZ,CADqC;AAGtC,OAHD;;AAKAF,MAAAA,YAAY,CAACQ,GAAb,CAAiB,CAACC,IAAD,EAAOP,KAAP,KAAiBQ,OAAO,CAACC,GAAR,CAAYF,IAAI,IAAIP,KAAK,GAAC,CAAV,CAAhB,CAAlC,EAbE,CAcJ;AACA;AACA;;AACE,YAAMU,MAAM,GAAGhB,cAAc,EAA7B;AACAN,MAAAA,aAAa,CAAC,CAACsB,MAAD,EAAS,IAAIvB,UAAU,GAAGA,UAAU,CAACwB,MAAX,GAAoB,CAAjC,GAAqCxB,UAArC,GAAkD,EAAtD,CAAT,CAAD,CAAb;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KApBA,CAoBC,OAAMsB,CAAN,EAAS;AACRnB,MAAAA,QAAQ,CAAC;AAACF,QAAAA,KAAK,EAAE,IAAR;AAAcP,QAAAA,OAAO,EAAE4B,CAAC,CAAC5B;AAAzB,OAAD,CAAR;AACH;AAAC,GAvBF;;AAyBEF,EAAAA,SAAS,CAAC,MAAM;AAChBe,IAAAA,eAAe;AAChB,GAFU,EAET,EAFS,CAAT;AAIA,SACA,0CACDR,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADV,EAEDG,QAAQ,IAAIA,QAAQ,CAACD,KAArB,IAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAF7B,EAGDJ,UAAU,IAAIA,UAAU,CAACwB,MAAX,GAAoB,CAAlC,IACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCxB,UAAU,CAACmB,GAAX,CAAeO,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,SAAS,CAAClB,IAAf,CAA5B,CADD,CAJJ,CADA;AAYH,CA/CD;;AAkDA,SAASZ,aAAT,EAAwBE,qBAAxB,EAA+CC,QAA/C","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst BaseComponent = ({ message='lol' }) => <div>{message}</div>\nconst BaseComponentWithData = () => <BaseComponent message=\"Bob is your uncle\"/>\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  const characterShape = ({name, ...rest }) => ({ name })\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true)\n      // create array of numbers ie characters newArray(0-20)\n      const charsToFetch = ['1','2','3','4','5','6','7','8','9','10'\n                                ,'11','12','13','14','15','16']\n      const result = async(index) => await (await fetch(\"https://swapi.co/api/people/\" + charsToFetch[index])).json()\n      // generate promise array [await fetch,fetch,fetch]\n      // promise.all for results\n      const getAllCharacters = async () => { await\n        Promise.all(charsToFetch.map((char, index) => {\n        result(index)}))\n      }\n\n      charsToFetch.map((char, index) => console.log(char * (index+1)))\n    //  charactersToFetch.map((characterToFetch, index) = async() => {\n    //     await(await fetch(\"https://swapi.co/api/people/\" + index))\n    //    }\n      const shaped = characterShape()\n      setCharacters([shaped, ...(characters & characters.length > 0 ? characters : [] )])\n      setLoading(false)\n   } catch(e) {\n      setError({state: true, message: e.message})\n  }}\n\n    useEffect(() => {\n    fetchCharacters();\n  },[]);\n\n    return (\n    <>\n  {loading && <div>Loading</div>}\n  {hasError && hasError.state && <div>Error</div>}\n  {characters && characters.length > 0 && (\n        <ul>\n        {characters.map(character => <li>{character.name}</li>)}\n        </ul>\n    )\n  }\n  </>\n)\n}\n\n\nexport { BaseComponent, BaseComponentWithData, StarWars }\n"]},"metadata":{},"sourceType":"module"}