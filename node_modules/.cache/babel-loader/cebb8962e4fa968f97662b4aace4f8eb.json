{"ast":null,"code":"import _objectSpread from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/src/Swapi.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Box from \"./Custom/Box\";\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1]; //object has metadata like films and planets\n  //consider how requests all update state\n\n\n  const _useState7 = useState({\n    charID: 0,\n    films: [''],\n    starships: [''],\n    vehicles: ['']\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        characterMetadata = _useState8[0],\n        setMetadata = _useState8[1];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        films = _ref.films,\n        rest = _objectWithoutProperties(_ref, [\"name\", \"films\"]);\n\n    return {\n      name\n    };\n  };\n\n  const shapeFilms = (_ref2) => {\n    let title = _ref2.title,\n        rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n    return {\n      title\n    };\n  };\n\n  const shapeStarships = (_ref3) => {\n    let name = _ref3.name,\n        rest = _objectWithoutProperties(_ref3, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  const shapeVehicles = (_ref4) => {\n    let name = _ref4.name,\n        rest = _objectWithoutProperties(_ref4, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n      const charactersToFetch = Array.from(Array(15));\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index + 1}/`)).json());\n      const results = await Promise.all(promises);\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [])]); //fetchCharacterMetadata(0)\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  const fetchCharacterMetadata = async charID => {\n    //Get character films..\n    const result = await (await fetch(`https://swapi.co/api/people/${charID + 1}/`)).json();\n\n    const fetchMetaPromises = async meta => {\n      if (meta.length > 0) {\n        const metaPromises = meta.map(async item => (await fetch(item)).json());\n        return await Promise.all(metaPromises);\n      }\n    };\n\n    let shapedFilms = [];\n    let shapedStarships = [];\n    let shapedVehicles = [];\n    const filmPromises = await fetchMetaPromises(result.films);\n    shapedFilms = filmPromises.map(result => shapeFilms(result));\n    const starshipPromises = await fetchMetaPromises(result.starships);\n    shapedStarships = starshipPromises.map(result => shapeStarships(result));\n    const vehiclePromises = await fetchMetaPromises(result.vehicles);\n    shapedVehicles = vehiclePromises.map(result => shapeVehicles(result)); //Set the Metadata sub keys\n\n    setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      films: [...shapedFilms, ...characterMetadata.films]\n    }));\n    setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      starships: [...shapedStarships, ...characterMetadata.starships]\n    }));\n    setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      vehicles: [...shapedVehicles, ...characterMetadata.vehicles]\n    }));\n    setLoading(false);\n  };\n\n  console.log(characterMetadata.films);\n  console.log(characterMetadata.starships);\n  console.log(characterMetadata.vehicles);\n  useEffect(() => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID);\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, hasError.message), characters && characters.length > 0 && !loading && React.createElement(Box, {\n    bg: 'background',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, characters.map((character, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    onClick: () => setMetadata(characterMetadata => _objectSpread({}, characterMetadata, {\n      charID: index\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, character.name))), React.createElement(\"div\", {\n    className: 'Row-Div',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, characterMetadata && React.createElement(Box, {\n    bg: 'contentAreaBackground',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, characterMetadata.films && characterMetadata.films.length > 0 && characterMetadata.films.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, metaData.title)), characterMetadata.starships && characterMetadata.starships.length > 0 && characterMetadata.starships.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, metaData.name)), characterMetadata.vehicles && characterMetadata.vehicles.length > 0 && characterMetadata.vehicles.map((metaData, index) => React.createElement(Box, {\n    key: index,\n    bg: 'contentAreaBackground',\n    textAlign: 'left',\n    p: 1,\n    px: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, metaData.name))))));\n};\n\nexport { StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/src/Swapi.js"],"names":["React","useEffect","useState","Box","StarWars","characters","setCharacters","loading","setLoading","state","message","hasError","setError","charID","films","starships","vehicles","characterMetadata","setMetadata","characterShape","name","rest","shapeFilms","title","shapeStarships","shapeVehicles","fetchCharacters","charactersToFetch","Array","from","promises","map","item","index","array","fetch","json","results","Promise","all","shapedResults","result","length","e","fetchCharacterMetadata","fetchMetaPromises","meta","metaPromises","shapedFilms","shapedStarships","shapedVehicles","filmPromises","starshipPromises","vehiclePromises","console","log","character","metaData"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport Box from \"./Custom/Box\";\n\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  //object has metadata like films and planets\n  //consider how requests all update state\n\n  const [characterMetadata, setMetadata] = useState({charID: 0, films: [''], starships: [''], vehicles: ['']})\n  const characterShape = ({ name, films, ...rest }) => ({ name });\n  const shapeFilms = ({title,...rest}) => ({title});\n  const shapeStarships =({name,...rest}) => ({name});\n  const shapeVehicles =({name,...rest}) => ({name});\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true);\n\n      const charactersToFetch = Array.from(Array(15));\n\n      const promises = charactersToFetch.map(async (item, index, array) => await (await fetch(`https://swapi.co/api/people/${index+1}/`)).json())\n\n      const results = await Promise.all(promises);\n\n      const shapedResults = results.map(result => characterShape(result));\n      setCharacters([...shapedResults, ...(characters & characters.length > 0 ? characters : [] )])\n      //fetchCharacterMetadata(0)\n    } catch(e) {\n      setError({state: true, message: e.message})\n    }\n  }\n\n  const fetchCharacterMetadata = async (charID) => {\n    //Get character films..\n    const result = await (await fetch(`https://swapi.co/api/people/${charID+1}/`)).json();\n\n    const fetchMetaPromises = async (meta) => {\n      if (meta.length > 0) {\n          const metaPromises = meta.map(async (item) => (await fetch(item)).json());\n          return await Promise.all(metaPromises);\n\n      }\n    };\n\n\n\n    let shapedFilms = [];\n    let shapedStarships = [];\n    let shapedVehicles = [];\n\n    const filmPromises = await fetchMetaPromises(result.films);\n    shapedFilms = filmPromises.map(result => shapeFilms(result));\n\n    const starshipPromises = await fetchMetaPromises(result.starships);\n    shapedStarships = starshipPromises.map(result => shapeStarships(result));\n\n    const vehiclePromises = await fetchMetaPromises(result.vehicles);\n    shapedVehicles = vehiclePromises.map(result => shapeVehicles(result));\n\n    //Set the Metadata sub keys\n    setMetadata((characterMetadata) => ({...characterMetadata, films: [...shapedFilms,...characterMetadata.films]}));\n    setMetadata((characterMetadata) => ({...characterMetadata, starships: [...shapedStarships, ...characterMetadata.starships]}));\n    setMetadata((characterMetadata) => ({...characterMetadata, vehicles: [...shapedVehicles,...characterMetadata.vehicles]}));\n\n    setLoading(false)\n  }\n  console.log(characterMetadata.films);\n  console.log(characterMetadata.starships);\n  console.log(characterMetadata.vehicles);\n  useEffect( () => {\n    fetchCharacters();\n    fetchCharacterMetadata(characterMetadata.charID)\n  },[]);\n\n\n  return (\n      <>\n        {loading && <div>Loading</div>}\n        {hasError && hasError.state &&\n        <div>{hasError.message}</div>}\n        {characters && characters.length > 0 && !loading && (\n            <Box bg={'background'}>\n              <div className={'Row-Div'}>\n                {characters.map((character,index) =>\n                    <Box key={index}\n                         bg={'contentAreaBackground'}\n                         textAlign={'left'} p={1} px={4}\n                         onClick={() => setMetadata((characterMetadata) => ({...characterMetadata, charID: index}))}>\n                      {character.name}\n                    </Box>)}\n              </div>\n              <div className={'Row-Div'}>\n                {characterMetadata && (\n\n                    <Box bg={'contentAreaBackground'}>\n\n                      {characterMetadata.films && characterMetadata.films.length > 0 &&(characterMetadata.films.map((metaData,index) =>\n\n                          <Box key={index}\n                               bg={'contentAreaBackground'}\n                               textAlign={'left'} p={1} px={4}>\n                            {metaData.title}</Box>))}\n\n                      {characterMetadata.starships && characterMetadata.starships.length > 0 && characterMetadata.starships.map((metaData,index) =>\n\n                          <Box key={index}\n                               bg={'contentAreaBackground'}\n                               textAlign={'left'} p={1} px={4}>\n                            {metaData.name}</Box>)}\n\n                      {characterMetadata.vehicles && characterMetadata.vehicles.length > 0 &&characterMetadata.vehicles.map((metaData,index) =>\n\n                          <Box key={index}\n                               bg={'contentAreaBackground'}\n                               textAlign={'left'} p={1} px={4}>\n                            {metaData.name}\n\n                          </Box>)}\n                    </Box>)}\n              </div>\n            </Box>\n        )\n        }\n      </>\n  )\n}\n\n\nexport { StarWars }\n"]},"metadata":{},"sourceType":"module"}