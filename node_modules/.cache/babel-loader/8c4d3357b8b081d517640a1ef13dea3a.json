{"ast":null,"code":"import _objectWithoutProperties from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/da/Northflank/personal/swapi/swapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst BaseComponent = ({\n  message = 'lol'\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 3\n  },\n  __self: this\n}, message);\n\nconst BaseComponentWithData = () => React.createElement(BaseComponent, {\n  message: \"Bob is your uncle\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n});\n\nconst StarWars = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    state: false,\n    message: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hasError = _useState6[0],\n        setError = _useState6[1];\n\n  const charactersToFetch = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n  const characterShape = (_ref) => {\n    let name = _ref.name,\n        rest = _objectWithoutProperties(_ref, [\"name\"]);\n\n    return {\n      name\n    };\n  };\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true); // create array of numbers ie characters newArray(0-20)\n      // generate promise array [await fetch,fetch,fetch]\n      // promise.all for results\n\n      const result = await (await fetch(\"https://swapi.co/api/people/1/\")).json();\n      const shaped = characterShape(result);\n      setCharacters([shaped, ...(characters & characters.length > 0 ? characters : [])]);\n      setLoading(false);\n    } catch (e) {\n      setError({\n        state: true,\n        message: e.message\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log('fdfgdfdf');\n    fetchCharacters();\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Loading\"), hasError && hasError.state && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Error\"), characters && characters.length > 0 && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, characters.map(character => React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, character.name))));\n};\n\nexport { BaseComponent, BaseComponentWithData, StarWars };","map":{"version":3,"sources":["/Users/da/Northflank/personal/swapi/swapi/src/Swapi.js"],"names":["React","useState","useEffect","BaseComponent","message","BaseComponentWithData","StarWars","characters","setCharacters","loading","setLoading","state","hasError","setError","charactersToFetch","characterShape","name","rest","fetchCharacters","result","fetch","json","shaped","length","e","console","log","map","character"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAO,GAAC;AAAV,CAAD,KAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,OAAN,CAA7C;;AACA,MAAMC,qBAAqB,GAAG,MAAM,oBAAC,aAAD;AAAe,EAAA,OAAO,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBACeL,QAAQ,CAAC,EAAD,CADvB;AAAA;AAAA,QACdM,UADc;AAAA,QACFC,aADE;;AAAA,qBAESP,QAAQ,CAAC,KAAD,CAFjB;AAAA;AAAA,QAEdQ,OAFc;AAAA,QAELC,UAFK;;AAAA,qBAGQT,QAAQ,CAAC;AAACU,IAAAA,KAAK,EAAE,KAAR;AAAeP,IAAAA,OAAO,EAAE;AAAxB,GAAD,CAHhB;AAAA;AAAA,QAGdQ,QAHc;AAAA,QAGJC,QAHI;;AAIrB,QAAMC,iBAAiB,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,EAAkC,EAAlC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,EAA3C,EAA8C,EAA9C,EAAiD,EAAjD,CAA1B;;AACA,QAAMC,cAAc,GAAG;AAAA,QAAEC,IAAF,QAAEA,IAAF;AAAA,QAAWC,IAAX;;AAAA,WAAuB;AAAED,MAAAA;AAAF,KAAvB;AAAA,GAAvB;;AAEA,QAAME,eAAe,GAAG,YAAY;AAClC,QAAI;AACFR,MAAAA,UAAU,CAAC,IAAD,CAAV,CADE,CAGF;AAEA;AAEA;;AAGA,YAAMS,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAC,gCAAD,CAAZ,EAAgDC,IAAhD,EAArB;AACA,YAAMC,MAAM,GAAGP,cAAc,CAACI,MAAD,CAA7B;AACAX,MAAAA,aAAa,CAAC,CAACc,MAAD,EAAS,IAAIf,UAAU,GAAGA,UAAU,CAACgB,MAAX,GAAoB,CAAjC,GAAqChB,UAArC,GAAkD,EAAtD,CAAT,CAAD,CAAb;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KAdA,CAcC,OAAMc,CAAN,EAAS;AACRX,MAAAA,QAAQ,CAAC;AAACF,QAAAA,KAAK,EAAE,IAAR;AAAcP,QAAAA,OAAO,EAAEoB,CAAC,CAACpB;AAAzB,OAAD,CAAR;AACH;AAAC,GAjBF;;AAmBEF,EAAAA,SAAS,CAAC,MAAM;AAChBuB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAR,IAAAA,eAAe;AAChB,GAHU,EAGT,EAHS,CAAT;AAKA,SACA,0CACDT,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADV,EAEDG,QAAQ,IAAIA,QAAQ,CAACD,KAArB,IAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAF7B,EAGDJ,UAAU,IAAIA,UAAU,CAACgB,MAAX,GAAoB,CAAlC,IACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACChB,UAAU,CAACoB,GAAX,CAAeC,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,SAAS,CAACZ,IAAf,CAA5B,CADD,CAJJ,CADA;AAYH,CA3CD;;AA8CA,SAASb,aAAT,EAAwBE,qBAAxB,EAA+CC,QAA/C","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst BaseComponent = ({ message='lol' }) => <div>{message}</div>\nconst BaseComponentWithData = () => <BaseComponent message=\"Bob is your uncle\"/>\n\nconst StarWars = () => {\n  const [characters, setCharacters] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [hasError, setError] = useState({state: false, message: ''})\n  const charactersToFetch = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  const characterShape = ({name, ...rest }) => ({ name })\n\n  const fetchCharacters = async () => {\n    try {\n      setLoading(true)\n\n      // create array of numbers ie characters newArray(0-20)\n\n      // generate promise array [await fetch,fetch,fetch]\n\n      // promise.all for results\n\n\n      const result = await (await fetch(\"https://swapi.co/api/people/1/\")).json()\n      const shaped = characterShape(result)\n      setCharacters([shaped, ...(characters & characters.length > 0 ? characters : [] )])\n      setLoading(false)\n   } catch(e) {\n      setError({state: true, message: e.message})\n  }}\n\n    useEffect(() => {\n    console.log('fdfgdfdf')\n    fetchCharacters();\n  },[]);\n\n    return (\n    <>\n  {loading && <div>Loading</div>}\n  {hasError && hasError.state && <div>Error</div>}\n  {characters && characters.length > 0 && (\n        <ul>\n        {characters.map(character => <li>{character.name}</li>)}\n        </ul>\n    )\n  }\n  </>\n)\n}\n\n\nexport { BaseComponent, BaseComponentWithData, StarWars }\n"]},"metadata":{},"sourceType":"module"}